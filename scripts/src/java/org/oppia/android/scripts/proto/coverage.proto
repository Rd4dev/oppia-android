syntax = "proto3";

package proto;

option java_package = "org.oppia.android.scripts.proto";
option java_multiple_files = true;

// Coverage Report that contains the bazel coverage data retrieved from the
// Bazel coverage execution.
message CoverageReport {
  // The test target for which the coverage report is generated.
  string bazel_test_target = 1;
  // A list of files covered in this coverage report.
  repeated CoveredFile covered_file = 2;
}

// Information about the single file that was covered during the tests.
message CoveredFile {
  // The relative path of the covered file.
  string file_path = 1;
  // SHA-1 hash of the file content at the time of report (to guard against changes).
  string file_sha1_hash = 2;
  // The lines of code covered in the report.
  repeated CoveredLine covered_line = 3;
  // The total number of lines found in the covered file.
  int32 lines_found = 4;
  // The total number of lines hit in the covered file.
  int32 lines_hit = 5;
  // The functions covered in the report. Function coverage indicates which functions
  // were executed during the tests and how many times each function was executed.
  repeated FunctionCoverage function_coverage = 6;
  // The total number of functions found in the covered file.
  int32 functions_found = 7;
  // The total number of functions hit in the covered file.
  int32 functions_hit = 8;
  // The branches covered in the report. Branch coverage shows different code paths
  // executed within conditional statements and how many times each was executed.
  repeated BranchCoverage branch_coverage = 9;
  // The total number of branches found in the covered file.
  int32 branches_found = 10;
  // The total number of branches hit in the covered file.
  int32 branches_hit = 11;
}

// Information about a single line that was covered during the tests.
message CoveredLine {
  // The line number of the covered line.
  int32 line_number = 1;
  // The coverage status of the covered line.
  Coverage coverage = 2;
}

// Information about branch coverage for a specific line.
message BranchCoverage {
  // The line number of where the branch is located in the covered file.
  int32 line_number = 1;
  // Block number and branch number are gcc internal IDs for the branch.
  int32 block_number = 2;
  int32 branch_number = 3;
  // The number of times the branch was executed.
  int32 hit_count = 4;
  // The coverage status of the covered line.
  Coverage coverage = 5;
}

message FunctionCoverage {
  // The line number of where the function is located in the covered file.
  int32 line_number = 1;
  // The name of the function in the covered file.
  string function_name = 2;
  // The number of times the function is executed.
  int32 execution_count = 3;
  // The coverage status of the covered line.
  Coverage coverage = 4;
}

enum Coverage {
  // Coverage status is unspecified.
  UNSPECIFIED = 0;
  // The line, branch, or function is fully covered, ie. executed atleast once.
  FULL = 1;
  // The line, branch, or function is not covered at all.
  NONE = 2;
}
